openapi: "3.1.0"
info:
  title: "OpenAPI definition"
  version: "v0"
servers:
  - url: "http://127.0.0.1:8080"
    description: "URL для менеджера задач"
paths:
  /api/tasks:
    get:
      summary: Получить все задачи
      tags:
        - "task-controller"
      operationId: "findAllTasks"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "page"
          in: "query"
          required: false
          description: Номер страницы для пагинации
          schema:
            type: "integer"
            format: "int32"
            default: 0
        - name: "size"
          in: "query"
          required: false
          description: Количество задач на странице
          schema:
            type: "integer"
            format: "int32"
            default: 10
        - name: "title"
          in: "query"
          required: false
          description: Фильтр по названию задачи
          schema:
            type: "string"
        - name: "status"
          in: "query"
          required: false
          description: Фильтр по статусу задачи
          schema:
            type: "string"
            enum:
              - "PENDING"
              - "IN_PROCESS"
              - "FINISHED"
        - name: "priority"
          in: "query"
          required: false
          description: Фильтр по приоритету задачи
          schema:
            type: "string"
            enum:
              - "LOW"
              - "MEDIUM"
              - "HIGH"
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
    put:
      summary: Обновить задачу
      tags:
        - "task-controller"
      operationId: "updateTask"
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
    post:
      summary: Создать новую задачу
      tags:
        - "task-controller"
      operationId: "createTask"
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/admin/users:
    get:
      summary: Получить всех пользователей
      tags:
        - "user-controller"
      operationId: "findAll"
      security:
        - bearerAuth: [ ]
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
    put:
      summary: Обновить данные пользователя
      tags:
        - "user-controller"
      operationId: "updateOne"
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /authenticate:
    post:
      summary: Получить JWT токен
      tags:
        - "auth-controller"
      operationId: "authenticate"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreds"
        required: true
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /authenticate/register:
    post:
      summary: Зарегистрировать нового пользователя
      tags:
        - "auth-controller"
      operationId: "register"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
        required: true
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/tasks/comment/{taskId}:
    get:
      summary: Получить комментарии к задаче
      tags:
        - "task-controller"
      operationId: "getCommentsByTask"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "taskId"
          in: "path"
          required: true
          description: ID задачи
          schema:
            type: "integer"
            format: "int64"
        - name: "page"
          in: "query"
          required: false
          description: Номер страницы для пагинации
          schema:
            type: "integer"
            format: "int32"
            default: 0
        - name: "size"
          in: "query"
          required: false
          description: Количество комментариев на странице
          schema:
            type: "integer"
            format: "int32"
            default: 10
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
    post:
      summary: Добавить комментарий к задаче
      tags:
        - "task-controller"
      operationId: "postTaskComment"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "taskId"
          in: "path"
          required: true
          description: ID задачи
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              type: "string"
        required: true
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/tasks/{taskId}/{statusCode}:
    patch:
      summary: Обновить статус задачи
      tags:
        - "task-controller"
      operationId: "updateTaskStatus"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "taskId"
          in: "path"
          required: true
          description: ID задачи
          schema:
            type: "integer"
            format: "int64"
        - name: "statusCode"
          description: Новый статус задачи
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
            enum:
              - 1
              - 2
              - 3
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/tasks/{taskId}/performer/{userId}:
    patch:
      summary: Назначить исполнителя задачи
      tags:
        - "task-controller"
      operationId: "updateTaskPerformer"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "taskId"
          in: "path"
          required: true
          description: ID задачи
          schema:
            type: "integer"
            format: "int64"
        - name: "userId"
          in: "path"
          required: true
          description: ID исполнителя
          schema:
            type: "integer"
            format: "int64"
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/admin/users/{userId}/authority/delete/{authorityCode}:
    patch:
      summary: Убрать роль у пользователя
      tags:
        - "user-controller"
      operationId: "deleteAuthorityForUser"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "userId"
          in: "path"
          required: true
          description: ID пользователя
          schema:
            type: "integer"
            format: "int64"
        - name: "authorityCode"
          in: "path"
          required: true
          description: Код роли
          schema:
            type: "integer"
            format: "int32"
            enum:
              - 1
              - 2
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/admin/users/{userId}/authority/add/{authorityCode}:
    patch:
      summary: Добавить роль пользователю
      tags:
        - "user-controller"
      operationId: "addAuthorityForUser"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "userId"
          in: "path"
          required: true
          description: ID пользователя
          schema:
            type: "integer"
            format: "int64"
        - name: "authorityCode"
          in: "path"
          required: true
          description: Код роли
          schema:
            type: "integer"
            format: "int32"
            enum:
              - 1
              - 2
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/tasks/{id}:
    get:
      summary: Получить задачу по ID
      tags:
        - "task-controller"
      operationId: "findTaskById"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: ID задачи
          schema:
            type: "integer"
            format: "int64"
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
    delete:
      summary: Удалить задачу по ID
      tags:
        - "task-controller"
      operationId: "deleteTaskById"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: ID задачи
          schema:
            type: "integer"
            format: "int64"
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/tasks/performer/{id}:
    get:
      summary: Получения списка задач по исполнителю
      tags:
        - "task-controller"
      operationId: "getTasksByPerformer"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: ID исполнителя
          schema:
            type: "integer"
            format: "int64"
        - name: "page"
          in: "query"
          required: false
          description: Номер страницы для пагинации
          schema:
            type: "integer"
            format: "int32"
            default: 0
        - name: "size"
          in: "query"
          required: false
          description: Количество задач на странице
          schema:
            type: "integer"
            format: "int32"
            default: 10
        - name: "title"
          in: "query"
          required: false
          description: Фильтр по названию задачи
          schema:
            type: "string"
        - name: "status"
          in: "query"
          required: false
          description: Фильтр по статусу задачи
          schema:
            type: "string"
            enum:
              - "PENDING"
              - "IN_PROCESS"
              - "FINISHED"
        - name: "priority"
          in: "query"
          required: false
          description: Фильтр по приоритету задачи
          schema:
            type: "string"
            enum:
              - "LOW"
              - "MEDIUM"
              - "HIGH"
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/tasks/author/{id}:
    get:
      summary: Получение списка задач по автору
      tags:
        - "task-controller"
      operationId: "getTasksByAuthor"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: ID автора
          schema:
            type: "integer"
            format: "int64"
        - name: "page"
          in: "query"
          required: false
          description: Номер страницы для пагинации
          schema:
            type: "integer"
            format: "int32"
            default: 0
        - name: "size"
          in: "query"
          required: false
          description: Количество задач на странице
          schema:
            type: "integer"
            format: "int32"
            default: 10
        - name: "title"
          in: "query"
          required: false
          description: Фильтр по названию задачи
          schema:
            type: "string"
        - name: "status"
          in: "query"
          required: false
          description: Фильтр по статусу задачи
          schema:
            type: "string"
            enum:
              - "PENDING"
              - "IN_PROCESS"
              - "FINISHED"
        - name: "priority"
          in: "query"
          required: false
          description: Фильтр по приоритету задачи
          schema:
            type: "string"
            enum:
              - "LOW"
              - "MEDIUM"
              - "HIGH"
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/admin/users/{id}:
    get:
      summary: Получение пользователя по ID
      tags:
        - "user-controller"
      operationId: "findOneById"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: ID пользователя
          schema:
            type: "integer"
            format: "int64"
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/admin/users/{userId}:
    delete:
      summary: Удаление пользователя по ID
      tags:
        - "user-controller"
      operationId: "deleteUserById"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "userId"
          in: "path"
          required: true
          description: ID пользователя
          schema:
            type: "integer"
            format: "int64"
      responses:
        '400':
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '401':
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorDetails"
        '200':
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
components:
  securitySchemes:
    bearerAuth: # Определение схемы авторизации
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
  schemas:
    ErrorDetails:
      type: "object"
      properties:
        message:
          type: "string"
        createdAt:
          type: "string"
    Task:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        title:
          type: "string"
        description:
          type: "string"
        status:
          type: "string"
          enum:
            - "PENDING"
            - "IN_PROCESS"
            - "FINISHED"
        priority:
          type: "string"
          enum:
            - "LOW"
            - "MEDIUM"
            - "HIGH"
        author:
          $ref: "#/components/schemas/User"
        taskPerformer:
          $ref: "#/components/schemas/User"
      required:
        - "author"
        - "description"
        - "priority"
        - "status"
        - "title"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
      required:
        - "email"
        - "firstName"
        - "lastName"
        - "password"
    UserCreds:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
    RegisterUser:
      type: "object"
      properties:
        email:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        password:
          type: "string"
